void generateBinaryFile(const char *inputFile, const char *binaryFile) {
    FILE *input = fopen(inputFile, "r");
    FILE *output = fopen(binaryFile, "wb");
    if (!input || !output) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    // Escreve o cabeçalho no arquivo binário
    writeHeader(output);

    Record record; // Declaração de uma variável do tipo Record para armazenar os dados lidos.
    char line[256]; // Buffer para armazenar cada linha lida do arquivo de entrada.

    // Lê cada linha do arquivo de entrada até o final.
    while (fgets(line, sizeof(line), input)) {
        // Analisa a linha lida, separando os campos delimitados por '|'.
        if (sscanf(line, "%d|%d|%lf|%255[^|]|%255[^|]|%255[^|]|%255[^|]",
                   &record.id, &record.year, &record.financialLoss,
                   record.country, record.attackType, record.targetIndustry, record.defenseStrategy) == 7) {
            // Inicializa os campos de controle.
            record.removido = '0'; // Registro não removido.
            record.prox = -1;      // Próximo registro logicamente removido (-1 indica nenhum).

            // Calcula o tamanho total do registro.
            record.tamanhoRegistro = sizeof(record.id) + sizeof(record.year) + sizeof(record.financialLoss) +
                                      sizeof(record.country) + sizeof(record.attackType) +
                                      sizeof(record.targetIndustry) + sizeof(record.defenseStrategy);

            // Escreve os campos de controle no arquivo binário.
            fwrite(&record.removido, sizeof(char), 1, output);
            fwrite(&record.tamanhoRegistro, sizeof(int), 1, output);
            fwrite(&record.prox, sizeof(long long), 1, output);

            // Escreve os campos de tamanho fixo.
            fwrite(&record.id, sizeof(int), 1, output);
            fwrite(&record.year, sizeof(int), 1, output);
            fwrite(&record.financialLoss, sizeof(double), 1, output);

            // Escreve os campos de tamanho fixo para strings com o tamanho de cada variável.
            int countrySize = strlen(record.country) + 1; // Inclui o caractere nulo.
            fwrite(&countrySize, sizeof(int), 1, output);
            fwrite(record.country, sizeof(char), countrySize, output);

            int attackTypeSize = strlen(record.attackType) + 1; // Inclui o caractere nulo.
            fwrite(&attackTypeSize, sizeof(int), 1, output);
            fwrite(record.attackType, sizeof(char), attackTypeSize, output);

            int targetIndustrySize = strlen(record.targetIndustry) + 1; // Inclui o caractere nulo.
            fwrite(&targetIndustrySize, sizeof(int), 1, output);
            fwrite(record.targetIndustry, sizeof(char), targetIndustrySize, output);

            int defenseStrategySize = strlen(record.defenseStrategy) + 1; // Inclui o caractere nulo.
            fwrite(&defenseStrategySize, sizeof(int), 1, output);
            fwrite(record.defenseStrategy, sizeof(char), defenseStrategySize, output);
        }
    }

    // Atualiza o status do cabeçalho para '1' (consistente)
    fseek(output, 0, SEEK_SET);
    char status = '1';
    fwrite(&status, sizeof(char), 1, output);

    fclose(input);
    fclose(output);
}